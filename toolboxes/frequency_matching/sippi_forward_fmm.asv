% sippi_forward_fmm: reutrn frequency distribution
%
% Call :
%  [d,forward,prior,data]=sippi_forward_fmm(m,forward,prior,data,id,im)
%
% See also frequency_matching
%
%  ip=1;
%     prior{ip}.type='mps';
%     prior{ip}.method='mps_snesim';
%     prior{ip}.x=1:1:80;
%     prior{ip}.y=1:1:80;
%     prior{ip}.ti=channels;
%  
% 
%
function [d,forward,prior,data]=sippi_forward_fmm(m,forward,prior,data,id,im)

if nargin<6, im=1;end
if nargin<5, id=1;end
if nargin<4, data{1}.null='';end





j=0; % counter for trace id
for id=1:forward.Nsources
  filename_sim=sprintf('%s%d%s',path_sim,id,'.mat');
  try
    load(filename_sim);
  catch
    keyboard
  end
  d_sim=Trace_Ez';
  d_sim=d_sim(forward.output_it:forward.output_it:end,:);
  if strcmp(forward.output_type,'shot')
    d{id}=d_sim(:);
  elseif strcmp(forward.output_type,'trace')
    for it=1:size(d_sim,2)
      j=j+1;
      d{j}=d_sim(:,it);
    end
  end
 
end

%% check that the output sizeof 'd' is the same as 'data'
if nargin>3
    if length(d)~=length(data)
        sippi_verbose(sprintf('%s: SOMETHING WENT WRONG READING FROM MATLAB OUTPUT OF FDTD',mfilename),-10)
        sippi_verbose(sprintf('%s: length(d)=%d, length(data)=%d',mfilename,length(d),length(data)),-10)
        sippi_verbose(sprintf('%s: TRYING FDTD AGAIN',mfilename),-10)
        
        % HMM SOMETHING WENT WRONG, try again
        [d,forward,prior,data]=sippi_forward_gpr_fd(m,forward,prior,data,id,im);
        
        if length(d)~=length(data)
            disp('SOMETHING WENT WRONG.... CHECK THE OUTPUT OF FDTD')
            keyboard
        end
        
        
    end
end

